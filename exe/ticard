#! /usr/bin/env ruby

require 'ticard'
require 'thor'
require 'yaml'

class TicardCLI < Thor

  desc "pull CARD-URL", "creates a new file with the card's contents"
  def pull(url)
    card = trello_repo.get(url)
    local_out_repo.put(card)
  end

  desc "push CARD-FILE", "synchronizes the card's contents in trello"
  option :force
  def push(path=nil)
    local_in_repo = path ? file_repo : piped_repo
    local_card = local_in_repo.get(path)
    remote_card = trello_repo.get(local_card.url)
    if options[:force] || local_card.from_same_content_as?(remote_card) || confirm_overwrite
      trello_repo.put(local_card)
      local_out_repo.put(local_card)
    end
  end

  private

  def confirm_overwrite
    yes?("Card has been changed since downloaded, save anyway?")
  end

  def trello_repo
    @_trello_repo ||= Ticard::TrelloRepository.new(trello_credentials)
  end

  def local_out_repo
    STDOUT.tty? ? file_repo : piped_repo
  end

  def file_repo
    @_file_repo ||= Ticard::FileRepository.new
  end

  def piped_repo
    @_piped_repo ||= Ticard::FdRepository.new(STDIN, STDOUT)
  end

  def trello_credentials
    path = %w(PWD HOME).map { |e| "#{ENV[e]}/.ticard.yml" }.detect { |p| File.exist?(p) }
    YAML.load_file(path)["keys"]
  end


end

TicardCLI.start(ARGV)


